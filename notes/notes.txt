__________________________________________________________________________________
METHODS
__________________________________________________________________________________
	---------------------------------------------------------------
								Iteration Methods
	---------------------------------------------------------------
	
	-each
		iterates through the collection and performs the action in the block.
		returns the original array object holding the collection
		EX.
			[1, 2, 'a', false].each do |item|
				item * 2 == 2 || item * 2 == 4 
			end
			=> [1, 2, 'a', false]
		for hashes it takes in two paramiters, for the key and value
		returns the original hash
	-select
		iterates through the collection and performs the action in the block.
		returns an array of any objects that have a truthy result from the block
		Note, it returns an array of pointers to the original objects 
		EX.
			[1, 2, 'a', false].select do |item|
				item * 2 == 2 || item * 2 == 4
			end
			=> [1, 2]
		for hashes it takes in two paramiters, for the key and value
		returns a hash of the truthy key value pairs
	-map
		iterates through the collection and performs the action in the block.
		returns an array of any objects that are the result of the block
		EX.
			[1, 2, 'a', false].map do |item|
				item * 2 == 2 || item * 2 == 4
			end
			=> [true, true, false, false]
		for hashes it takes in two paramiters, for the key and value
		returns an array of the last run line of the block for each key value pair
		
			
	-each_with_index
		for arrays 
			same as #each but it also takes in the index as a paramiter
		for hashes 
			it takes two paramiters: the key value pair as an array [k, v], and the index
		returns the object it was called on
		
	-each_with_object()
		for arrays
			you declair an object like an array of hash when calling the method 
			pass it two paramiters: the collection iteration and the new object
			return is the new object
			EX.
				[1, 2, 3].each_with_object([]) do |iteration, new_array|
					new_array << iteration if iteration.odd?
				end
				=>[1, 3]
		for hashes
			same but teh iteration paramiter is the key value pair as an array
			
	- *array (known as splat method)
		pass each element of an arrayas an argument to a method
		EX.
			some_method(*array)
			is the same as:
			some_method(array[0], array[1], array[2], ...)
		it turns the array into a comma separated list
			arr = [1, 2, 3]
			(*arr) => (1, 2, 3)

	---------------------------------------------------------------
								Comparison Methods
	---------------------------------------------------------------
	
	- <=>
		Compares two objects and returns either -1, 0, 1, or nil
			2 <=> 1      #=> 1
			1 <=> 2   	 #=> -1
			1 <=> 1   	 #=> 0
			'b' <=> 'a'  #=> 1
			1 <=> 'a'    #=> nil
	
	
	---------------------------------------------------------------
								Other Methods
	---------------------------------------------------------------
	
	- Format
		kernal method 
	
__________________________________________________________________________________
VOCAB
__________________________________________________________________________________
	
	-Boolean
		Only purpose is to convey a true or false value

	-Conditional Operators
		Comparison Operators -- &&  ,  | |
		Short Circuiting
			Comparison operators return their value (true or false) one they are certain of it
				Ex.   if  true || ERROR => true  -- the error is never reached
		Everything is true except false and nil
	
	-Procedural Way / Imperitive Way
		Step by step logic a program needs to follow, the flow written out
	Declaritive Way
		using methods to abstract away some of the flow of logic
	EX. using the each method vs making a flow chart that details each loop
	
	-yaml
		configuration file type
		To Use
			at top put
				require 'yaml'
			to parse in a file put
				VARIABLE_NAME = YAML.load_file('example_file.yml')
	
	-Binding
		something that contains references to any variables that are in scope at the
		point where it is called
	
	-shadowing
		when defining a paramiter for within a block (i.e. array.each do |x|)
		if there is a 'x' variable outside the block this will prevent access to 
		it and only use the 'x' created locally within it
		* try to avoid doint this *
	
	-Method Definition
		when creating a method in ruby - with the 'def' keyword
		method definition sets a scope for the method regarding access to variables
			through paramiters and blocks
	-Method Invocation
		calling an existing method, one created in the program or already existing 
		in the ruby framework
		method invocation uses the scope set by the definition
		
	-Pass by value
		when invoking a method with a variable as an argument, the method recieves a 
		copy of the value the variable holds.
		it can't change the value of the original variable
	-Pass by reference
		when invoking a method with a variavle as an argument, the method can make 
		changes to the original value of the variable
	-ruby is both of these
		it will only change the original value if the method being called mutates the
		caller. otherwise the original variable stays unchanged.

	-String Interpolation
		using #{example} within a string to return the code in the block as a string 
		
	-Basics of looping
		you need:
			a loop
			a counter
			a way to retrieve the curent value
			a way to exit the loop
	
	-Shallow Copy
		when using the #dup or #clone methods on arrays, a new object is created that
		is the new array but the objects in the array are teh same objects from the 
		origianl
		this means that mutating the objects in either array changes both of them
	
	-Element-wise sorting
		when sorting nested arrays, the elements at coresponding indexes in the inner
		arrays are compared. once one of the indexes differs they are sorted and the
		rest of the inner array is not considered
		EX.
			[[1, 2, 3, 1, 1], [1, 2, 4, 9, 9]].sort
			this see index 0 and 1 match then sorts according to index 2 and ignores the rest
	
	-Parallel Asignment
		exchanging two values without needing an intermediate variable
		EX
			a, b = b, a
			the values are swaped, the alt would be 
				c = a
				a = b
				b = c
__________________________________________________________________________________
PSUDO-CODE
__________________________________________________________________________________

	
	PEDAC
		Problem
			
	
	
	
	
	START            Start the program
	SET              Set a variable
	GET              Get input from user
	PRINT            display output to user
	READ             retreive value from variable
	IF/ELSE IF/ELSE  show conditional branches
	WHILE            show looping logic
	SUBPROCESS			 infers other sudocode has handled the logic
	END              end program
	
	
	
	
__________________________________________________________________________________
RUBOCOP
__________________________________________________________________________________

  https://launchschool.com/lessons/a0f3cd44/assignments/8e770c8a
	
	analizes code for mistakes in convention or coding errors
	
	TO RUN
		in comand line => rubocop file_name.rb
		
	The Return
		example => hello.rb:1:13:C: message containg the error
		  means => file : row : column : error code : message
		
		Codes 
			C => convention => styling of code
			W => warning
			E => error
			F => fatal error
	
	Skipping cops in code
		put the following commented out 
			# rubocop:disable offence/to/skip
		allow it again after the code to skip over
			# rubocop:enable offence/to/skip
	
	To Configure
		
		It will look for a .rubocop.yml file in the current directory 
			then recusively through the parent directories
		Try not to nest these files
		
		
__________________________________________________________________________________
PRY
__________________________________________________________________________________


	REPL Debugging tool that allows you to stop a program and check the valuses of all
	variables at that point. 
	Can also call methods through pry like irb
	
	To Use
		at start of program put 
			require 'pry'
		at the stop point you want put
			binding.pry
		to exit type
			exit-program
			
		More Context code 
			from pry REPL
				whereami [number of lines]
				EX
				=>whereami 5
						1  #code
						2  #code
						3  #code
						4  #code	
						5  binding.pry 
						6  #code
						7  #code
						8  #code
						9  #code
						10 #code
