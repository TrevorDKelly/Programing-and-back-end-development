FOCUS
  call variables local variables unless they are constants
  explain Indexed assignment
  

language
  method definition
    https://launchschool.com/lessons/a0f3cd44/assignments/9e9e907c
  method invocation
  local variable
    scope
    Mutability
    https://launchschool.com/blog/references-and-mutability-in-ruby
    https://launchschool.com/blog/mutating-and-non-mutating-methods
    https://launchschool.com/blog/object-passing-in-ruby
  initialize
  assigned
  assignment
  reassigned
  block
  method
    argument
    paramiter
    return
    call
    invocation
  truthiness vs boolean true
    evaluates
  falsiness vs boolean false
    evaluates
  Integer
    Bignum & Fixnum are depricated
    https://launchschool.com/lessons/c82cd406/assignments/1788c3a1
  Transformation
  


re-do
  variables as pointers
  precision of language
  
  
===============================================================================
Language
===============================================================================

Variables
  Types
    Constants
      These store data that never needs to be changed 
      They can be accessed at any scope
      Always written in all caps
      EX
        COIN_FLIP_OPTIONS = ['heads', 'tails']
    
    Local Variable
      Follow all rules of scope
      always written in all lower case
      EX
        name = 'Trevor'
      
    Global
      Start with $ sign
      Available through an entire application
      Generaly avoided in ruby
      
    Class
      Start with @@
      accessed by instences of a class and class itself
      must be initialized at class level
      
    Instance
      start with @
      Accessable thoughout current instance of the parent class
      cross some scope boundries

Collections
  arrays and hashes

Collection Element
  each object in a collection
    object at a[1]

Element Reference
  how to access an element in a collection
  String
    str[5]
      6th element at index 5
    str[5, 8]
      8 elements starting at index 5
      this is the #slice method
  Array
    list of elements ordered by index
    same functions as String for reference
    
  
Scope
  Where in a program a variable is available for use
  it is determined by where it is initialized
  this is defined by a block
  Inner scope can access variables initialized in the outer scope
  Outer scope CANNOT access variables initialized in an inner scope
  the outermost scope is refered to as 'main'

Nested
  one within another
  Nested block 
    one block running within another
  Nested Scope
    When a new scope is created within an inner scope
    a new level of scope 
  Level
    how new inner scopes are defined
  EX
    a = 5           #=> Level 1, outer (main) scope
    loop do         #=> Invoking a method, starts new level & new scope
      b = 2         #=> Level 2, inner scope 
      a.times do    #=> Invoking a method, starts new level & new scope
        c = a * b   #=> Level 3, inner inner scope
      end
      break
    end  
    #=> local variable a is available in all level 
    #=> local variable b is available in level 2 and 3
    #=> local variable c is only available in level 3

Block
  piece of code following a method invocation
  it is part of the method invocation
  Usually delimited by curly brackets {} or do/end
    not all do/end pairs imply a block
    Only when directly following a method invocation
    EXs.
      while x < 5 do
        * Not a block. while is not a method, it is a part of the language
        * Same goes for if, for, case, until
  a block is like an argument being passed to a method
  a block creates a new scope - an inner scope
    a = 2
    [1, 2, 3].map { |num| num + a } #=> [3, 4, 5]
    #=> in this, #map doen't have direct access to a (it is a method with its own scope)
    #=> but, the block does have access to a

Method Invocation / Invoke
  calling a method, from the core API or one created in a program
  EX
    array.join => invoking the join method on array
  using the scope set by the method definition and if the method accepts a
  block, the block's scope adds flexibility to how the method interacts with
  its surroundings.
  
Method Definition
  when we create a method in the code using the def keyword
  EX
    def do_something(with_this)
  setting a scope for local variables, in terms of the paramiters the method has, and
  what the method does with those paramiters, and
  how it interacts (if at all) with a block.
  
Initialize
  Create a variable
  
Paramiter
  a local variable initialized in method definition
  that receives a value when the method is invoked
  EXs
    def new_method(paramiter)
      puts paramiter
    end
    
    array.each do |paramiter|
      puts paramiter
    end

Argument
  the value passed to a paramiter upon method invocation
  EX
    a = 'an argument'
    new_method(a) #=> a is the argument passed to new_method
    
Variable Shadowing
  when a paramiter being passed into a block > (a.each do |paramiter|)
  has the same name as a local variable in an outer scope
  the outer scope local variable becomes no longer accessable
  Avoid Doing This
  
Leak
  When a method definition has a scope that is entirely self contained
    there is no outer or inner scope carried into it
  only local variables passed into the method through paramiters can be acessed
  
Lexical Scope
  What constant variables have
  allows access outside the scope where a variable is defined
  
Variable
  variable referenecs value
  value is assigned to variable
  
Indexed Assignment - #[]=
  reassignment by index
    a[2] = 'now this'
  even though it uses '=' it is not reassignment. 
    the original object (a) is mutated
  
= += -= *=
  assignment operator
  
==
  equivalance operator
  
<, >
  less than operator, greater than operator

Multi-dimentional array
  array within an array
  [[a, b], [c, d]]
  
&& operator
  returns true if the expressions on both sides of the operator evaluate to true,
  otherwise it returns false
  
|| operator
  returns true if either the expressions on the left or the right evaluates to true.
  returns false if both sides evaluate to false
  
Element Reference

If
  Statement --> the whole thing
                Also the keyword and conditional -> (if x = y)
  Keywords --> if, elsif, else
  Conditional --> being evaluated to determin flow
  Branch / Clause --> what is run when a statement evaluates to true
  if (conditional)
    (branch)
  elsif
    (branch)  
  
  - if modifier
    When if follows an expresion, expression is run if what is after the if is truthy
      return x if x < 7

Loops
  Need these 4 things
    A Loop
    A Counter
    A way to retrieve curent value
    A way to exit the loop
    
    
************************************************************************************************
************************************************************************************************
************************************************************************************************

CANNED PHRASES

************************************************************************************************
************************************************************************************************



Variables as Pointers
  - This shows how, because variables are pointers to objects, modifying an object changed what is referenced by any variable pointing to that object

Map 
  - `#map` iterates through the calling array and passes each element into the block assigning it to the paramiter, `n`.
    `#map` returns a new, transformed array where each element is the return value of the block for that iteration.

HASH
  Each
    - `Hash#each` iterates through the calling collection passing each key value pair into the block in turn and assigning them to the paramiters `key` and `value`.
  Select
    - the `Hash#select` method iterated throught the calling Hash and passes each key value pair into the block in turn assigning them to the paramiters `k` and `v`.
      `Hash#select` returns a hash containg any key value pairs for which the block returns a truthy value.

